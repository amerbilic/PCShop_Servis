// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RepositoryLayer;

namespace RepositoryLayer.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20210217212945_new")]
    partial class @new
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccessLayer.Models.Administrator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Administratori");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@admin.com",
                            Ime = "admin",
                            IsSuperAdmin = true,
                            Prezime = "admin"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Artikal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cijena")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("KratkiOpis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PopustId")
                        .HasColumnType("int");

                    b.Property<int?>("ProizvodjacId")
                        .HasColumnType("int");

                    b.Property<int>("Sifra")
                        .HasColumnType("int");

                    b.Property<int>("StanjeNaSkladistu")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PopustId");

                    b.HasIndex("ProizvodjacId");

                    b.ToTable("Artikal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cijena = 1200.0,
                            IsDeleted = false,
                            KratkiOpis = "Ovo je neki malo kraci opis, a takodjer je jako dosadno raditi seedanje DB-a",
                            Model = "Neki glupi model",
                            Naziv = "Testni1",
                            Opis = "Neki opis koji nesto znaci a zapravo nista ne znaci, samo ovdje da popuni mjesto, 123,321,321,123, ovo je jako dosadno.",
                            PopustId = 1,
                            ProizvodjacId = 1,
                            Sifra = 123321,
                            StanjeNaSkladistu = 10
                        },
                        new
                        {
                            Id = 2,
                            Cijena = 1300.0,
                            IsDeleted = false,
                            KratkiOpis = "Ovo je neki malo kraci opis, a takodjer je jako dosadno raditi seedanje DB-a",
                            Model = "Neki glupi model",
                            Naziv = "Testni2",
                            Opis = "Neki opis koji nesto znaci a zapravo nista ne znaci, samo ovdje da popuni mjesto, 123,321,321,123, ovo je jako dosadno.",
                            PopustId = 1,
                            ProizvodjacId = 2,
                            Sifra = 123322,
                            StanjeNaSkladistu = 12
                        },
                        new
                        {
                            Id = 3,
                            Cijena = 500.0,
                            IsDeleted = false,
                            KratkiOpis = "Ovo je neki malo kraci opis, a takodjer je jako dosadno raditi seedanje DB-a",
                            Model = "Neki glupi model",
                            Naziv = "Testni33",
                            Opis = "Neki opis koji nesto znaci a zapravo nista ne znaci, samo ovdje da popuni mjesto, 123,321,321,123, ovo je jako dosadno.",
                            ProizvodjacId = 1,
                            Sifra = 123324,
                            StanjeNaSkladistu = 5
                        },
                        new
                        {
                            Id = 4,
                            Cijena = 1400.0,
                            IsDeleted = false,
                            KratkiOpis = "Ovo je neki malo kraci opis, a takodjer je jako dosadno raditi seedanje DB-a",
                            Model = "Neki glupi model",
                            Naziv = "Testni44",
                            Opis = "Neki opis koji nesto znaci a zapravo nista ne znaci, samo ovdje da popuni mjesto, 123,321,321,123, ovo je jako dosadno.",
                            PopustId = 1,
                            ProizvodjacId = 2,
                            Sifra = 123355,
                            StanjeNaSkladistu = 11
                        },
                        new
                        {
                            Id = 5,
                            Cijena = 1100.0,
                            IsDeleted = false,
                            KratkiOpis = "Ovo je neki malo kraci opis, a takodjer je jako dosadno raditi seedanje DB-a",
                            Model = "Neki glupi model",
                            Naziv = "Testni666",
                            Opis = "Neki opis koji nesto znaci a zapravo nista ne znaci, samo ovdje da popuni mjesto, 123,321,321,123, ovo je jako dosadno.",
                            ProizvodjacId = 3,
                            Sifra = 121111,
                            StanjeNaSkladistu = 5
                        },
                        new
                        {
                            Id = 6,
                            Cijena = 140.0,
                            IsDeleted = false,
                            KratkiOpis = "Ovo je neki malo kraci opis, a takodjer je jako dosadno raditi seedanje DB-a",
                            Model = "Neki glupi model",
                            Naziv = "Testni5555",
                            Opis = "Neki opis koji nesto znaci a zapravo nista ne znaci, samo ovdje da popuni mjesto, 123,321,321,123, ovo je jako dosadno.",
                            PopustId = 1,
                            ProizvodjacId = 2,
                            Sifra = 1233215,
                            StanjeNaSkladistu = 6
                        },
                        new
                        {
                            Id = 7,
                            Cijena = 4760.0,
                            IsDeleted = false,
                            KratkiOpis = "Ovo je neki malo kraci opis, a takodjer je jako dosadno raditi seedanje DB-a",
                            Model = "Neki glupi model",
                            Naziv = "Testni2333",
                            Opis = "Neki opis koji nesto znaci a zapravo nista ne znaci, samo ovdje da popuni mjesto, 123,321,321,123, ovo je jako dosadno.",
                            PopustId = 1,
                            ProizvodjacId = 4,
                            Sifra = 321455,
                            StanjeNaSkladistu = 7
                        },
                        new
                        {
                            Id = 8,
                            Cijena = 140.0,
                            IsDeleted = false,
                            KratkiOpis = "Ovo je neki malo kraci opis, a takodjer je jako dosadno raditi seedanje DB-a",
                            Model = "Neki glupi model",
                            Naziv = "Testni278",
                            Opis = "Neki opis koji nesto znaci a zapravo nista ne znaci, samo ovdje da popuni mjesto, 123,321,321,123, ovo je jako dosadno.",
                            ProizvodjacId = 7,
                            Sifra = 898123,
                            StanjeNaSkladistu = 7
                        },
                        new
                        {
                            Id = 9,
                            Cijena = 1880.0,
                            IsDeleted = false,
                            KratkiOpis = "Ovo je neki malo kraci opis, a takodjer je jako dosadno raditi seedanje DB-a",
                            Model = "Neki glupi model",
                            Naziv = "Testni2asd",
                            Opis = "Neki opis koji nesto znaci a zapravo nista ne znaci, samo ovdje da popuni mjesto, 123,321,321,123, ovo je jako dosadno.",
                            PopustId = 1,
                            ProizvodjacId = 4,
                            Sifra = 8876812,
                            StanjeNaSkladistu = 9
                        },
                        new
                        {
                            Id = 10,
                            Cijena = 444.0,
                            IsDeleted = false,
                            KratkiOpis = "Ovo je neki malo kraci opis, a takodjer je jako dosadno raditi seedanje DB-a",
                            Model = "Neki glupi model",
                            Naziv = "Testni2fgfgw",
                            Opis = "Neki opis koji nesto znaci a zapravo nista ne znaci, samo ovdje da popuni mjesto, 123,321,321,123, ovo je jako dosadno.",
                            PopustId = 1,
                            ProizvodjacId = 5,
                            Sifra = 987754,
                            StanjeNaSkladistu = 32
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Models.ArtikalKategorija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ArtikalKategorija");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Dobavljac", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Broj")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Dobavljac");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Broj = "061234132",
                            Ime = "Nvidia",
                            Mail = "dobavljac@dobavljac.com"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Models.Grad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Grad");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ime = "Mostar"
                        },
                        new
                        {
                            Id = 2,
                            Ime = "Sarajevo"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Models.Kupac", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BrojMobitela")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BrojPokusaja")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumPokusaja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GradId")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("GradId");

                    b.ToTable("Kupci");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrojMobitela = "061545545",
                            BrojPokusaja = 0,
                            DatumPokusaja = new DateTime(2021, 2, 17, 22, 29, 44, 664, DateTimeKind.Local).AddTicks(4477),
                            Email = "kupac@kupac.com",
                            GradId = 1,
                            Ime = "kupac",
                            Prezime = "kupicic"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Models.Narudzba", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumNarudzbe")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GradId")
                        .HasColumnType("int");

                    b.Property<string>("Kontakt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KupacId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("UkupnaCijena")
                        .HasColumnType("float");

                    b.Property<int?>("ZaposlenikId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GradId");

                    b.HasIndex("KupacId");

                    b.HasIndex("ZaposlenikId");

                    b.ToTable("Narudzba");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Popusti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumDo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumOd")
                        .HasColumnType("datetime2");

                    b.Property<float>("Popust")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Popusti");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DatumDo = new DateTime(2021, 2, 17, 22, 29, 44, 664, DateTimeKind.Local).AddTicks(1511),
                            DatumOd = new DateTime(2021, 2, 17, 22, 29, 44, 661, DateTimeKind.Local).AddTicks(6621),
                            Popust = 0.1f
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Models.Poruka", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdministratorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumSlanja")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Procitano")
                        .HasColumnType("bit");

                    b.Property<string>("Sadrzaj")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tema")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZaposlenikId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdministratorId");

                    b.HasIndex("ZaposlenikId");

                    b.ToTable("Poruke");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Proizvodjac", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Proizvodjac");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Nvidia"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Apple"
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "Sapphire"
                        },
                        new
                        {
                            Id = 4,
                            Naziv = "Intel"
                        },
                        new
                        {
                            Id = 5,
                            Naziv = "AMD"
                        },
                        new
                        {
                            Id = 6,
                            Naziv = "Nekilijevi1"
                        },
                        new
                        {
                            Id = 7,
                            Naziv = "Nepadaminapamet"
                        },
                        new
                        {
                            Id = 8,
                            Naziv = "Nistanovo"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Models.Servis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cijena")
                        .HasColumnType("float");

                    b.Property<DateTime>("DatumPrijema")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumZavrsetka")
                        .HasColumnType("datetime2");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusServisa")
                        .HasColumnType("int");

                    b.Property<int>("ZaposlenikId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ZaposlenikId");

                    b.ToTable("Servis");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Skladiste", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Kapacitet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skladiste");
                });

            modelBuilder.Entity("DataAccessLayer.Models.SmsLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Broj")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DodatniSadrzaj")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Poruka")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SmsLog");
                });

            modelBuilder.Entity("DataAccessLayer.Models.StavkaNarudzbe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArtikalId")
                        .HasColumnType("int");

                    b.Property<double>("Cijena")
                        .HasColumnType("float");

                    b.Property<int>("Kolicina")
                        .HasColumnType("int");

                    b.Property<int>("NarudzbaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArtikalId");

                    b.HasIndex("NarudzbaId");

                    b.ToTable("StavkaNarudzbe");
                });

            modelBuilder.Entity("DataAccessLayer.Models.StavkaServis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cijena")
                        .HasColumnType("float");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServisId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServisId");

                    b.ToTable("StavkaServis");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Zaposlenik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GradId")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ulica")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("GradId");

                    b.ToTable("Zaposlenici");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Zaposlenik@zaposlenik.com",
                            GradId = 1,
                            Ime = "Zaposlenik",
                            Prezime = "Zaposlenkic",
                            Ulica = "Nekaulica",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Administrator", b =>
                {
                    b.HasOne("DataAccessLayer.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Administratori")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccessLayer.Models.Artikal", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Popusti", "Popust")
                        .WithMany("Artikal")
                        .HasForeignKey("PopustId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccessLayer.Models.Proizvodjac", "Prozivodjac")
                        .WithMany("Artikli")
                        .HasForeignKey("ProizvodjacId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccessLayer.Models.Kupac", b =>
                {
                    b.HasOne("DataAccessLayer.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Kupci")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccessLayer.Models.Grad", "Grad")
                        .WithMany("Kupac")
                        .HasForeignKey("GradId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Models.Narudzba", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Grad", null)
                        .WithMany("Narudzba")
                        .HasForeignKey("GradId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccessLayer.Models.Kupac", "Kupac")
                        .WithMany("Narudzba")
                        .HasForeignKey("KupacId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.Zaposlenik", "Zaposlenik")
                        .WithMany("Narudzba")
                        .HasForeignKey("ZaposlenikId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccessLayer.Models.Poruka", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Administrator", "Administrator")
                        .WithMany("Poruka")
                        .HasForeignKey("AdministratorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.Zaposlenik", "Zaposlenik")
                        .WithMany("Poruka")
                        .HasForeignKey("ZaposlenikId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Models.Servis", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Zaposlenik", "Zaposlenik")
                        .WithMany("Servis")
                        .HasForeignKey("ZaposlenikId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Models.StavkaNarudzbe", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Artikal", "Artikal")
                        .WithMany("StavkaNarudzbe")
                        .HasForeignKey("ArtikalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.Narudzba", "Narudzba")
                        .WithMany("StavkaNarudzbe")
                        .HasForeignKey("NarudzbaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Models.StavkaServis", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Servis", "Servis")
                        .WithMany("StavkaServis")
                        .HasForeignKey("ServisId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Models.Zaposlenik", b =>
                {
                    b.HasOne("DataAccessLayer.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Zaposlenici")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccessLayer.Models.Grad", "Grad")
                        .WithMany("Zaposlenik")
                        .HasForeignKey("GradId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataAccessLayer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataAccessLayer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataAccessLayer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
